# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c88uP2hj1-OO0NURhiD0jevePcfaFUBH
"""
import numpy as np

class Solution: 
    def findWords(self, board, words):
        
        result = []
        m = len(board)
        n = len(board[0])
        visit=np.zeros((m,n))
        
        for ch in words:
            sign = False
            for i in range(m):
                for j in range(n):
                    if ch[0] == board[i][j]:
                        visit[i][j]=1
                        if self.search(board, visit, m, n, i, j, ch, 0):
                            result.append(ch)
                            sign=True
                            visit[i][j]=0
                            break
                        visit[i][j]=0
                if sign:
                    break            
        return result
    
    def search(self, board, visit, m, n, i, j, word, index):
        if index+1==len(word):
           return True
        
        if i+1<m and board[i+1][j]==word[index+1] and visit[i+1][j]==0:
            visit[i+1][j]=1
            if self.search(board,visit,m,n,i+1,j,word,index+1):
                visit[i+1][j]=0
                return True 
            visit[i+1][j]=0
        
        if i-1>=0 and board[i-1][j]==word[index+1] and visit[i-1][j]==0:
            visit[i-1][j]=1
            if self.search(board,visit,m,n,i-1,j,word,index+1):
                visit[i-1][j]=0
                return True
            visit[i-1][j]=0
            
        if j-1>=0 and board[i][j-1]==word[index+1] and visit[i][j-1]==0:
            visit[i][j-1]=1
            if self.search(board,visit,m,n,i,j-1,word,index+1):
                visit[i][j-1]=0
                return True
            visit[i][j-1]=0
            
        if j+1<n and board[i][j+1]==word[index+1] and visit[i][j+1]==0:
            visit[i][j+1]=1
            if self.search(board,visit,m,n,i,j+1,word,index+1):
                visit[i][j+1]=0
                return True
            visit[i][j+1]=0
            
        return False
        

# Your WordDictionary object will be instantiated and called as such:
#board=[["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]]
#words=["oath","pea","eat","rain"]
#board=[["a","b"]]
#words=["ba"]
board=[["a","b","c"],["a","e","d"],["a","f","g"]]
words=["abcdefg","gfedcbaaa","eaabcdgfa","befa","dgc","ade"]
instance = Solution()
result = instance.findWords(board, words)
print(result)