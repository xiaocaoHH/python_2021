# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c88uP2hj1-OO0NURhiD0jevePcfaFUBH
"""

class TrieTreeNode:
    def __init__(self):
        self.child = {}
        self.is_word = False
        
class Trie:
    def __init__(self):
        self.root = TrieTreeNode()
        
    def add(self, word):
        node = self.root
        for ch in word:
            if ch not in node.child:
                node.child[ch] = TrieTreeNode()
            node = node.child[ch]
        node.is_word=True
            
        
    def search(self, word, index, node=None):
        if node==None:
            node = self.root
        
        for i in range(index, len(word), 1):
            if word[i]=='.':
                for child in node.child.values():
                    if self.search(word, i+1, child):
                        return True
                return False
            
            if word[i] not in node.child:
                return False
        
            node = node.child[word[i]]
            
        return node.is_word
        
        
        
class WordDictionary:

    def __init__(self):
	    self.trie = Trie()
	    self.longest = 0
        

    def addWord(self, word: str) -> None:
	    self.trie.add(word)
	    self.longest = max(self.longest, len(word))

    def search(self, word: str) -> bool:
	    if len(word) > self.longest: return False
	    return self.trie.search(word, 0)
