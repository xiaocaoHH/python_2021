# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c88uP2hj1-OO0NURhiD0jevePcfaFUBH
"""
# bucket sorting (copy from solution)
class Solution:
    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:
        bucket, bucketSize = {}, valueDiff+1
        def getIdx(m):
            return m//bucketSize if m >=0 else (m+1)//bucketSize-1
        
        for idx, n in enumerate(nums):
		    # find index of current buckect
            buckectIdx = getIdx(n)
			# check if current buckect exists, if so, we find the answer
            if buckectIdx in bucket: return True
			
			# check if the element in left and right neugnbor of current buckect meet the valueDiff condition
            l, r = buckectIdx-1, buckectIdx+1
            if l in bucket and abs(bucket[l] - n) <= valueDiff:
                return True
            if r in bucket and abs(bucket[r] - n) <= valueDiff:
                return True
			
			# create new buckect for current element
            bucket[buckectIdx] = n
			
			# remove invalid buckect which element index not meets the indexDiff condition
            if idx >= indexDiff:
                bucket.pop(getIdx(nums[idx-indexDiff]))
        return False